version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai4thai-postgres
    environment:
      POSTGRES_DB: ai4thai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: ai4thai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Rust)
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ai4thai-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    environment:
      # Database
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/ai4thai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379
      
      # Service Discovery
      - VISION_SERVICE_URL=http://vision-service:8001
      - LLM_SERVICE_URL=http://llm-service:8002
      
      # External APIs
      - TTS_API_KEY=${TTS_API_KEY}
      - TTS_API_URL=${TTS_API_URL:-https://api.elevenlabs.io/v1}
      - ASR_API_KEY=${ASR_API_KEY}
      - ASR_API_URL=${ASR_API_URL:-https://api.openai.com/v1}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - API_KEY_SALT=${API_KEY_SALT:-your-api-key-salt}
      
      # Logging
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vision Service (Python)
  vision-service:
    build:
      context: ./ai-services/vision-service
      dockerfile: Dockerfile
    container_name: ai4thai-vision-service
    ports:
      - "${VISION_SERVICE_PORT:-8001}:8001"
    environment:
      - MODEL_PATH=/app/models
      - MODEL_NAME=${VISION_MODEL_NAME:-crop-disease-efficientnet-b0}
      - BATCH_SIZE=${VISION_BATCH_SIZE:-4}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-1024}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.7}
      - GPU_ENABLED=${GPU_ENABLED:-false}
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./ai-services/vision-service/models:/app/models
      - ./ai-services/vision-service/logs:/app/logs
      - ./temp-images:/app/temp-images
    deploy:
      resources:
        limits:
          memory: ${VISION_MEMORY_LIMIT:-4G}
        reservations:
          memory: ${VISION_MEMORY_RESERVATION:-2G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    restart: unless-stopped

  # LLM Service (Python)
  llm-service:
    build:
      context: ./ai-services/llm-service
      dockerfile: Dockerfile
    container_name: ai4thai-llm-service
    ports:
      - "${LLM_SERVICE_PORT:-8002}:8002"
    environment:
      # LLM Provider APIs
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      
      # LLM Configuration
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4}
      - MAX_TOKENS=${MAX_TOKENS:-1000}
      - TEMPERATURE=${TEMPERATURE:-0.7}
      
      # Thai Language Support
      - THAI_MODEL_PATH=/app/models/thai
      - TRANSLATION_API_KEY=${TRANSLATION_API_KEY}
      
      # Performance
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./ai-services/llm-service/prompts:/app/prompts
      - ./ai-services/llm-service/models:/app/models
      - ./ai-services/llm-service/logs:/app/logs
    deploy:
      resources:
        limits:
          memory: ${LLM_MEMORY_LIMIT:-2G}
        reservations:
          memory: ${LLM_MEMORY_RESERVATION:-1G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    restart: unless-stopped

  # Frontend (Yew WASM)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_BUILD_TARGET:-development}
    container_name: ai4thai-frontend
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    environment:
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:3000}
      - WS_URL=${WS_URL:-ws://api-gateway:3000/ws}
      - APP_ENV=${APP_ENV:-development}
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NGINX Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: ai4thai-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./uploads:/usr/share/nginx/html/uploads
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway
      - frontend
    restart: unless-stopped
    profiles: ["production"]

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: ai4thai-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: ai4thai-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: ai4thai-network
    driver: bridge