# AI4Thai Crop Guardian - Main Application
# This compose file only runs the main application (API Gateway + Frontend)
# For AI services, use ai-services/deployment/docker-compose.yml

version: '3.8'

services:
  # Frontend - Yew WebAssembly PWA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ai4thai-frontend
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    environment:
      - API_GATEWAY_URL=http://api-gateway:3000
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped

  # API Gateway - Rust/Axum
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: ai4thai-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    environment:
      # External AI Services (for demo)
      - AI4THAI_API_KEY=${AI4THAI_API_KEY}
      - VISION_SERVICE_URL=${VISION_SERVICE_URL:-https://vision-api.ai4thai.com}
      
      # Self-hosted AI Services (uncomment if self-hosting)
      # - VISION_SERVICE_URL=http://vision-service:2001
      # - QUEUE_WORKER_URL=http://queue-worker:2003
      
      # Chat storage
      - REDIS_URL=redis://redis:6379
      
      # Server config
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - RUST_LOG=${RUST_LOG:-info}
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for chat storage
  redis:
    image: redis:7-alpine
    container_name: ai4thai-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local