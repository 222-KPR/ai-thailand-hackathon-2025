# AI4Thai Shared Makefile Template
# Standardized development commands for all services

# Service-specific variables (to be set by including Makefile)
SERVICE_NAME ?= {{ SERVICE_NAME }}
SERVICE_PORT ?= {{ SERVICE_PORT }}
SERVICE_TYPE ?= {{ SERVICE_TYPE }}

# Common variables
PYTHON_VERSION = 3.11
UV_ARGS = --python $(PYTHON_VERSION)

# Default target
.PHONY: help
help:
	@echo "AI4Thai $(SERVICE_NAME) - Available commands:"
	@echo ""
	@echo "Environment Setup:"
	@echo "  install      Install production dependencies using uv"
	@echo "  dev-install  Install development dependencies using uv"
	@echo "  setup        Complete development environment setup"
	@echo ""
	@echo "Code Quality:"
	@echo "  lint         Run ruff linter"
	@echo "  format       Format code with ruff"
	@echo "  check        Run both linting and formatting checks"
	@echo "  fix          Auto-fix linting and formatting issues"
	@echo ""
	@echo "Testing:"
	@echo "  test         Run pytest with coverage"
	@echo "  test-fast    Run pytest without coverage"
	@echo "  test-unit    Run only unit tests"
	@echo "  test-integration  Run only integration tests"
	@echo ""
	@echo "Development:"
	@echo "  dev          Start service in development mode"
	@echo "  run          Start service in production mode"
{% if SERVICE_TYPE == "queue-worker" %}
	@echo "  worker       Start Celery worker"
	@echo "  beat         Start Celery beat scheduler"
{% endif %}
	@echo ""
	@echo "Maintenance:"
	@echo "  clean        Clean up cache and temporary files"
	@echo "  deps-update  Update dependencies to latest versions"

# Environment setup targets
.PHONY: install
install:
	@echo "Installing production dependencies with uv..."
	uv sync --frozen

.PHONY: dev-install
dev-install:
	@echo "Installing development dependencies with uv..."
	uv sync --all-extras --dev

.PHONY: setup
setup: dev-install
	@echo "Development environment setup complete!"
	@echo "Run 'make dev' to start the service in development mode"

# Code quality targets
.PHONY: lint
lint:
	@echo "Running ruff linter..."
	uv run ruff check .

.PHONY: format
format:
	@echo "Formatting code with ruff..."
	uv run ruff format .

.PHONY: check
check:
	@echo "Running all code quality checks..."
	uv run ruff check --diff .
	uv run ruff format --check .

.PHONY: fix
fix:
	@echo "Auto-fixing linting and formatting issues..."
	uv run ruff check --fix .
	uv run ruff format .

# Testing targets
.PHONY: test
test:
	@echo "Running tests with coverage..."
	uv run pytest

.PHONY: test-fast
test-fast:
	@echo "Running tests without coverage..."
	uv run pytest --no-cov

.PHONY: test-unit
test-unit:
	@echo "Running unit tests..."
	uv run pytest -m "unit"

.PHONY: test-integration
test-integration:
	@echo "Running integration tests..."
	uv run pytest -m "integration"

# Development targets
.PHONY: dev
dev:
	@echo "Starting $(SERVICE_NAME) in development mode..."
	uv run uvicorn app:app --host 0.0.0.0 --port $(SERVICE_PORT) --reload

.PHONY: run
run:
	@echo "Starting $(SERVICE_NAME) in production mode..."
	uv run python app.py

# Service-specific targets (conditionally included)
{% if SERVICE_TYPE == "queue-worker" %}
.PHONY: worker
worker:
	@echo "Starting Celery worker..."
	uv run celery -A tasks worker --loglevel=info

.PHONY: beat
beat:
	@echo "Starting Celery beat scheduler..."
	uv run celery -A tasks beat --loglevel=info
{% endif %}

# Maintenance targets
.PHONY: clean
clean:
	@echo "Cleaning up cache and temporary files..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete 2>/dev/null || true
	find . -name ".coverage" -delete 2>/dev/null || true

.PHONY: deps-update
deps-update:
	@echo "Updating dependencies..."
	uv lock --upgrade

# CI/CD targets
.PHONY: ci-install
ci-install:
	uv sync --frozen

.PHONY: ci-check
ci-check: check test

# Docker targets
.PHONY: docker-build
docker-build:
	docker build -t ai4thai-$(SERVICE_NAME) .

.PHONY: docker-run
docker-run:
	docker run -p $(SERVICE_PORT):$(SERVICE_PORT) ai4thai-$(SERVICE_NAME)

# Health check target
.PHONY: health
health:
	@echo "Checking $(SERVICE_NAME) health..."
	@curl -f http://localhost:$(SERVICE_PORT)/health || echo "Service not responding"
