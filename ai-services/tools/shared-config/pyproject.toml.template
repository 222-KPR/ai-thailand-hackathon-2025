# AI4Thai Shared Python Project Configuration Template
# This template provides standardized configuration for all Python services

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
# These will be replaced by service-specific values
name = "{{ SERVICE_NAME }}"
version = "{{ SERVICE_VERSION | default('1.0.0') }}"
description = "{{ SERVICE_DESCRIPTION }}"
readme = "{{ README_PATH | default('README.md') }}"
requires-python = ">=3.11"
license = {file = "../../LICENSE"}
authors = [
    {name = "AI Thailand Hackathon 2025 - Team KPR"},
]
keywords = {{ KEYWORDS | default('["agriculture", "ai", "thailand"]') }}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Common base dependencies for all AI4Thai services
dependencies = [
    # Web Framework
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",

    # Configuration and validation
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "python-dotenv==1.0.0",

    # HTTP and async
    "httpx==0.25.2",
    "aiofiles==23.2.1",

    # Logging
    "structlog==23.2.0",

    # Additional service-specific dependencies will be added here
    {{ ADDITIONAL_DEPENDENCIES }}
]

[project.optional-dependencies]
# Standard dev dependencies for all services
dev = [
    "ruff>=0.3.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx[test]>=0.25.0",
]

lint = ["ruff>=0.3.0"]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx[test]>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/ai-thailand-hackathon-2025/team10"
Repository = "https://gitlab.nectec.or.th/hackathon/ai-thailand-2025/team10"
Issues = "https://gitlab.nectec.or.th/hackathon/ai-thailand-2025/team10/-/issues"

# Standardized Ruff configuration for all AI4Thai services
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    ".git", ".venv", "__pycache__", "build", "dist",
    ".pytest_cache", ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E", "W",    # pycodestyle errors & warnings
    "F",         # Pyflakes
    "I",         # isort
    "B",         # flake8-bugbear
    "C4",        # flake8-comprehensions
    "UP",        # pyupgrade
    "SIM",       # flake8-simplify
    "TCH",       # flake8-type-checking
    "T20",       # flake8-print
    "RUF",       # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (let ruff format handle it)
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # print found (allow prints for debugging in AI services)
    "B904",   # Within an except clause, raise exceptions with raise ... from err
]

fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["PLR2004", "S101", "TID252"]
"**/tests/**" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Standardized Pytest configuration for all AI4Thai services
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests", "."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests requiring GPU resources",
]
asyncio_mode = "auto"

# Standardized Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*", ".venv/*", "build/*", "dist/*", "**/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
