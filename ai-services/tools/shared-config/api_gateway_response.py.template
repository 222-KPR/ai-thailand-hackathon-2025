# AI4Thai API Gateway Response Format
# Template for standardized response format for external API gateway compliance

"""
Standardized response format for AI4Thai services to comply with provider API gateway
All external-facing endpoints must return responses in this format
"""

from typing import Any, Dict, Optional
from datetime import datetime
import time


class APIGatewayResponse:
    """Standardized response format for provider API gateway compliance."""

    @staticmethod
    def success(data: Any, message: str = "Success", processing_time_ms: Optional[float] = None) -> Dict[str, Any]:
        """
        Generate success response format for API gateway.

        Args:
            data: The main response data
            message: Success message
            processing_time_ms: Processing time in milliseconds

        Returns:
            Standardized response dictionary with timestamp and detail keys
        """
        response = {
            "timestamp": time.time(),  # Unix timestamp as required by provider
            "detail": {
                "status": "success",
                "message": message,
                "data": data
            }
        }

        if processing_time_ms is not None:
            response["detail"]["processing_time_ms"] = processing_time_ms

        return response

    @staticmethod
    def error(error_message: str, error_code: str = "INTERNAL_ERROR", data: Optional[Any] = None) -> Dict[str, Any]:
        """
        Generate error response format for API gateway.

        Args:
            error_message: Description of the error
            error_code: Error code identifier
            data: Optional additional error data

        Returns:
            Standardized error response dictionary with timestamp and detail keys
        """
        response = {
            "timestamp": time.time(),
            "detail": {
                "status": "error",
                "error_code": error_code,
                "message": error_message
            }
        }

        if data is not None:
            response["detail"]["data"] = data

        return response

    @staticmethod
    def health_check(service_name: str, status: str = "healthy", additional_info: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Generate health check response format for API gateway.

        Args:
            service_name: Name of the service
            status: Health status (healthy, unhealthy, degraded)
            additional_info: Optional additional health information

        Returns:
            Standardized health check response
        """
        response = {
            "timestamp": time.time(),
            "detail": {
                "service": service_name,
                "status": status,
                "message": f"Service {service_name} is {status}"
            }
        }

        if additional_info:
            response["detail"].update(additional_info)

        return response


# Example usage for AI4Thai services:
"""
# In your FastAPI endpoints:

@app.get("/health")
async def health_check():
    return APIGatewayResponse.health_check("AI4Thai Vision Service")

@app.post("/detect/pests")
async def detect_pests(image: UploadFile):
    try:
        # Your processing logic here
        results = await process_image(image)
        processing_time = calculate_processing_time()

        return APIGatewayResponse.success(
            data=results,
            message="Pest detection completed successfully",
            processing_time_ms=processing_time
        )
    except Exception as e:
        return APIGatewayResponse.error(
            error_message=str(e),
            error_code="PEST_DETECTION_FAILED"
        )
"""
