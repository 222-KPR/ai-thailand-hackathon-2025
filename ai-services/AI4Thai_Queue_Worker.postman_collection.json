{
	"info": {
		"_postman_id": "ai4thai-queue-worker",
		"name": "AI4Thai Queue Worker API",
		"description": "API testing collection for AI4Thai Queue Worker - background job processing and image data management service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ai4thai-team"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/health",
							"host": ["{{queue_base_url}}"],
							"path": ["health"]
						},
						"description": "Check queue worker health including Redis and Celery worker status"
					},
					"response": []
				},
				{
					"name": "Service Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/info",
							"host": ["{{queue_base_url}}"],
							"path": ["info"]
						},
						"description": "Get queue worker service information and capabilities"
					},
					"response": []
				},
				{
					"name": "Root Overview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/",
							"host": ["{{queue_base_url}}"],
							"path": [""]
						},
						"description": "Root endpoint with queue worker overview"
					},
					"response": []
				}
			],
			"description": "Health check and service information endpoints"
		},
		{
			"name": "Async Analysis Jobs",
			"item": [
				{
					"name": "Queue Pest Detection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "confidence_threshold",
									"value": "0.01",
									"type": "text"
								},
								{
									"key": "return_details",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/analyze/pest",
							"host": ["{{queue_base_url}}"],
							"path": ["analyze", "pest"]
						},
						"description": "Queue an asynchronous pest detection job"
					},
					"response": []
				},
				{
					"name": "Queue Disease Detection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "custom_prompt",
									"value": "Analyze this leaf for diseases and provide treatment recommendations",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/analyze/disease",
							"host": ["{{queue_base_url}}"],
							"path": ["analyze", "disease"]
						},
						"description": "Queue an asynchronous disease detection job"
					},
					"response": []
				},
				{
					"name": "Queue Comprehensive Analysis",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "pest_confidence",
									"value": "0.3",
									"type": "text"
								},
								{
									"key": "pest_details",
									"value": "true",
									"type": "text"
								},
								{
									"key": "disease_prompt",
									"value": "Comprehensive plant health analysis for Thai farming conditions",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/analyze/comprehensive",
							"host": ["{{queue_base_url}}"],
							"path": ["analyze", "comprehensive"]
						},
						"description": "Queue a comprehensive analysis job (pest + disease detection)"
					},
					"response": []
				}
			],
			"description": "Asynchronous job queuing endpoints"
		},
		{
			"name": "Job Management",
			"item": [
				{
					"name": "Get Job Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/jobs/{{job_id}}",
							"host": ["{{queue_base_url}}"],
							"path": ["jobs", "{{job_id}}"]
						},
						"description": "Get the status and results of a specific job by job ID"
					},
					"response": []
				},
				{
					"name": "Cancel Job",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/jobs/{{job_id}}",
							"host": ["{{queue_base_url}}"],
							"path": ["jobs", "{{job_id}}"]
						},
						"description": "Cancel a pending job by job ID"
					},
					"response": []
				}
			],
			"description": "Job lifecycle management endpoints"
		},
		{
			"name": "Image Storage",
			"item": [
				{
					"name": "Store Image",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "metadata",
									"value": "{\"source\": \"test_upload\", \"crop_type\": \"rice\", \"location\": \"thailand\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/images/store",
							"host": ["{{queue_base_url}}"],
							"path": ["images", "store"]
						},
						"description": "Store image data with optional metadata for later processing"
					},
					"response": []
				}
			],
			"description": "Image storage and management endpoints"
		},
		{
			"name": "Monitoring & Stats",
			"item": [
				{
					"name": "Queue Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/queue/stats",
							"host": ["{{queue_base_url}}"],
							"path": ["queue", "stats"]
						},
						"description": "Get queue statistics including active jobs, workers, and Redis status"
					},
					"response": []
				},
				{
					"name": "Image Storage Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/images/stats",
							"host": ["{{queue_base_url}}"],
							"path": ["images", "stats"]
						},
						"description": "Get image storage statistics including count and memory usage"
					},
					"response": []
				}
			],
			"description": "System monitoring and statistics endpoints"
		},
		{
			"name": "Maintenance",
			"item": [
				{
					"name": "Trigger Cleanup",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/maintenance/cleanup",
							"host": ["{{queue_base_url}}"],
							"path": ["maintenance", "cleanup"]
						},
						"description": "Manually trigger cleanup of old images and job results"
					},
					"response": []
				}
			],
			"description": "Maintenance and administrative endpoints"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Invalid Job ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{queue_base_url}}/jobs/invalid-job-id-12345",
							"host": ["{{queue_base_url}}"],
							"path": ["jobs", "invalid-job-id-12345"]
						},
						"description": "Test error handling for invalid job ID"
					},
					"response": []
				},
				{
					"name": "Missing Image for Queue",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "confidence_threshold",
									"value": "0.5",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/analyze/pest",
							"host": ["{{queue_base_url}}"],
							"path": ["analyze", "pest"]
						},
						"description": "Test error handling when image is missing from queue request"
					},
					"response": []
				},
				{
					"name": "Invalid Metadata JSON",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "metadata",
									"value": "invalid-json-string",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{queue_base_url}}/images/store",
							"host": ["{{queue_base_url}}"],
							"path": ["images", "store"]
						},
						"description": "Test error handling with invalid JSON metadata"
					},
					"response": []
				}
			],
			"description": "Error handling and edge case testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for requests",
					"pm.globals.set('timestamp', new Date().toISOString());",
					"",
					"// Generate test job ID if needed",
					"if (!pm.globals.get('test_job_id')) {",
					"    pm.globals.set('test_job_id', 'test-job-' + Math.random().toString(36).substr(2, 9));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common test assertions",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 seconds max",
					"});",
					"",
					"// Extract job_id from successful queue requests",
					"if (pm.response.code === 200 && pm.request.url.path.includes('analyze')) {",
					"    const jsonData = pm.response.json();",
					"    if (jsonData.job_id) {",
					"        pm.globals.set('job_id', jsonData.job_id);",
					"        pm.test('Job queued successfully', function () {",
					"            pm.expect(jsonData).to.have.property('job_id');",
					"            pm.expect(jsonData).to.have.property('status');",
					"            pm.expect(jsonData.status).to.equal('queued');",
					"        });",
					"    }",
					"}",
					"",
					"// Test for job status responses",
					"if (pm.request.url.path.includes('jobs') && pm.request.method === 'GET') {",
					"    if (pm.response.code === 200) {",
					"        pm.test('Job status response structure', function () {",
					"            const jsonData = pm.response.json();",
					"            pm.expect(jsonData).to.have.property('job_id');",
					"            pm.expect(jsonData).to.have.property('status');",
					"        });",
					"    }",
					"}",
					"",
					"// Test for stats endpoints",
					"if (pm.request.url.path.includes('stats')) {",
					"    if (pm.response.code === 200) {",
					"        pm.test('Statistics response has data', function () {",
					"            const jsonData = pm.response.json();",
					"            pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
					"        });",
					"    }",
					"}",
					"",
					"// Test for error responses",
					"if (pm.response.code >= 400) {",
					"    pm.test('Error response has detail', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('detail');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "queue_base_url",
			"value": "http://localhost:2003",
			"type": "string",
			"description": "Base URL for the Queue Worker API"
		},
		{
			"key": "queue_production_url",
			"value": "http://your-production-server:2003",
			"type": "string",
			"description": "Production URL for the Queue Worker API"
		},
		{
			"key": "job_id",
			"value": "",
			"type": "string",
			"description": "Job ID extracted from queue responses for testing"
		}
	]
}
