[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai4thai-queue-worker"
version = "1.0.0"
description = "AI4Thai Crop Guardian - Queue Worker for background job processing and image data management"
readme = "../README.md"
requires-python = ">=3.11"
license = {file = "../../LICENSE"}
authors = [
    {name = "AI Thailand Hackathon 2025 - Team KPR"},
]
keywords = ["agriculture", "queue", "celery", "background-jobs", "ai", "thailand"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Web Framework
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",

    # Queue and caching
    "redis==5.0.1",
    "celery==5.3.4",
    "kombu==5.3.4",

    # Configuration and validation
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",

    # Image processing (lightweight)
    "Pillow==10.1.0",
    "httpx==0.25.2",

    # File handling
    "aiofiles==23.2.1",

    # Logging and monitoring
    "structlog==23.2.0",
    "prometheus-client==0.19.0",
    "opentelemetry-api==1.21.0",
    "opentelemetry-sdk==1.21.0",
    "opentelemetry-instrumentation-fastapi==0.42b0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx[test]>=0.25.0",
]

lint = [
    "ruff>=0.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx[test]>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/ai-thailand-hackathon-2025/team10"
Repository = "https://gitlab.nectec.or.th/hackathon/ai-thailand-2025/team10"
Issues = "https://gitlab.nectec.or.th/hackathon/ai-thailand-2025/team10/-/issues"

[project.scripts]
queue-worker = "app:main"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "T20",    # flake8-print
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules that may be too strict for this project
ignore = [
    "E501",   # Line too long (let ruff format handle it)
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # print found (allow prints for debugging)
    "B904",   # Within an except clause, raise exceptions with raise ... from err
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"test_*.py" = ["PLR2004", "S101", "TID252"]
"**/tests/**" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
known-first-party = ["tasks"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests", "."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    ".venv/*",
    "build/*",
    "dist/*",
    "**/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
